networks:
  echonet:
    driver: bridge

volumes:
  postgres_data:
  verdaccio_data:
  letsencrypt:
  ui:
  api:
  admin:
  billing:
  learn:

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@echo.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/letsencrypt

    networks:
      - echonet

  verdaccio:
    image: verdaccio/verdaccio:latest
    container_name: verdaccio
    restart: unless-stopped
    networks:
      - echonet
    ports:
      - "4873:4873"
    volumes:
      - verdaccio_data:/verdaccio/storage
      - ./verdaccio/conf:/verdaccio/conf

  echodb:
    image: postgres:16-alpine
    container_name: echodb
    restart: unless-stopped
    networks:
      - echonet
    environment:
      POSTGRES_USER: echouser
      POSTGRES_PASSWORD: 3ch0n3t0933!
      POSTGRES_DB: echodb
    volumes:
      - postgres_data:/var/lib/postgresql/data  
    
  echo_ui:
    image: node:20-alpine
    container_name: echo_ui
    restart: unless-stopped
    networks:
      - echonet
    ports:
    - "3001:3000"
    working_dir: /echo
    volumes:
      - ./ui:/echo
    command: ["/bin/sh", "-c",  "if [ ! -f yarn.lock ]; then yarn install; fi && yarn dev" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=Host(`www.echo.local`)"
      - "traefik.http.routers.ui.entrypoints=web,websecure"
      - "traefik.http.routers.ui.tls.certresolver=myresolver"

  echo_api:
    build:
      context: .
      dockerfile: Dockerfile.dev-base
    container_name: echo_api
    restart: unless-stopped
    networks:
      - echonet
    ports:
      - "3002:3001"
    working_dir: /api
    volumes:
      - ./api:/api
    command: ["/bin/sh", "-c",  "cd /api && if [ ! -f yarn.lock ]; then yarn install; fi && yarn dev" ]  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.echo.local`)"
      - "traefik.http.routers.api.entrypoints=web,websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"


  echo_redis:
    image: redis:7-alpine
    container_name: echo_redis
    restart: unless-stopped
    networks:
      - echonet

  echo_admin:
    image: node:20-alpine
    container_name: echo_admin
    restart: unless-stopped
    networks:
      - echonet
    ports:
      - "3003:3002"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.echo.local`)"
      - "traefik.http.routers.admin.entrypoints=web,websecure"
      - "traefik.http.routers.admin.tls.certresolver=myresolver"

  echo_billing:
    image: node:20-alpine
    container_name: echo_billing
    restart: unless-stopped
    networks:
      - echonet
    ports:
      - "3004:3003"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.billing.rule=Host(`billing.echo.local`)"
      - "traefik.http.routers.billing.entrypoints=web,websecure"
      - "traefik.http.routers.billing.tls.certresolver=myresolver"
  
  echo_learn:
    image: node:20-alpine
    container_name: echo_learn
    restart: unless-stopped
    networks:
      - echonet
    ports:
      - "3005:3004"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.learn.rule=Host(`learn.echo.local`)"
      - "traefik.http.routers.learn.entrypoints=web,websecure"
      - "traefik.http.routers.learn.tls.certresolver=myresolver"